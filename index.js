import 'dotenv/config'
import express from 'express'
import makeWASocket, { useMultiFileAuthState, Browsers } from '@whiskeysockets/baileys'
import { TelegramClient } from 'telegram'
import { StringSession } from 'telegram/sessions/index.js'
import { NewMessage } from 'telegram/events/index.js'
import qrcode from 'qrcode-terminal'

// ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
const {
  TELEGRAM_API_ID,
  TELEGRAM_API_HASH,
  TELEGRAM_STRING_SESSION,
  TELEGRAM_SOURCE,
  WHATSAPP_GROUP_NAME,
  ADMIN_TOKEN,
  PORT = 3000,
} = process.env

let sock = null
let waGroupJid = null
let currentQR = null
let lastQR = null // –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π QR

// ---------------- Telegram ----------------
const tgClient = new TelegramClient(
  new StringSession(TELEGRAM_STRING_SESSION),
  Number(TELEGRAM_API_ID),
  TELEGRAM_API_HASH,
  { connectionRetries: 5 }
)

tgClient.addEventHandler(async (event) => {
  const message = event.message
  const sender = await message.getSender()

  if (
    sender &&
    (String(sender.id) === TELEGRAM_SOURCE ||
      sender.username === TELEGRAM_SOURCE ||
      sender.firstName === TELEGRAM_SOURCE)
  ) {
    console.log('üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram:', message.message)
    await sendToWhatsApp(message.message)
  }
}, new NewMessage({}))

async function initTelegram() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram...')
  await tgClient.connect()
  console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω')
  console.log('üë§ –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:', TELEGRAM_SOURCE)
}

// ---------------- WhatsApp (Baileys) ----------------
async function startWhatsApp({ reset = false } = {}) {
  const { state, saveCreds } = await useMultiFileAuthState('auth_info')

  sock = makeWASocket({
    auth: state,
    browser: Browsers.appropriate('Render', 'Chrome'),
  })

  sock.ev.on('creds.update', saveCreds)

  sock.ev.on('connection.update', (update) => {
    const { connection, qr } = update

    console.log('üîÑ connection.update:', update)

    if (qr) {
      if (qr !== lastQR) {
        console.log('üì± –ù–æ–≤—ã–π QR –ø–æ–ª—É—á–µ–Ω')
        currentQR = qr
        lastQR = qr
        qrcode.generate(qr, { small: true }) // –ª–æ–∫–∞–ª—å–Ω—ã–π ASCII
        console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-QR: https://tg-wa-bridge.onrender.com/wa/qr`)
      }
    } else {
      if (lastQR) {
        console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω, QR –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω')
        lastQR = null
        currentQR = null
      }
    }

    if (connection === 'open') {
      console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω')
      cacheGroupJid()
    }

    if (connection === 'close') {
      console.log('‚ùå WhatsApp –æ—Ç–∫–ª—é—á—ë–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...')
      setTimeout(startWhatsApp, 5000)
    }
  })

  if (reset) {
    console.log('‚ôªÔ∏è –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp ‚Äî –∂–¥–∏—Ç–µ –Ω–æ–≤—ã–π QR...')
  }
}

async function cacheGroupJid() {
  try {
    const groups = await sock.groupFetchAllParticipating()
    const target = Object.values(groups).find(
      (g) =>
        (g.subject || '').trim().toLowerCase() ===
        (WHATSAPP_GROUP_NAME || '').trim().toLowerCase()
    )
    if (target) {
      waGroupJid = target.id
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ WhatsApp: ${target.subject} (${waGroupJid})`)
    } else {
      console.log(`‚ùå –ì—Ä—É–ø–ø–∞ WhatsApp "${WHATSAPP_GROUP_NAME}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:', e)
  }
}

async function sendToWhatsApp(text) {
  if (!sock) return console.log('‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WhatsApp')
  if (!waGroupJid) await cacheGroupJid()
  if (!waGroupJid) return console.log('‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ')

  try {
    await sock.sendMessage(waGroupJid, { text })
    console.log('‚û°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ WhatsApp')
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp:', err)
  }
}

// ---------------- Express (Render + –∞–¥–º–∏–Ω) ----------------
const app = express()
app.use(express.json())

app.get('/', (req, res) => res.send('ü§ñ Telegram ‚Üí WhatsApp (Baileys) –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'))

// —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º QR
app.get('/wa/qr', (req, res) => {
  res.send(`
    <h2>üì± QR –¥–ª—è WhatsApp</h2>
    <div id="qr">
      <p>–ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR...</p>
    </div>
    <p>QR –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥</p>
    <script>
      async function fetchQR() {
        try {
          const r = await fetch('/wa/qr/json')
          const data = await r.json()
          const qrDiv = document.getElementById('qr')
          if (data.qr) {
            qrDiv.innerHTML = '<img src="https://api.qrserver.com/v1/create-qr-code/?data=' + encodeURIComponent(data.qr) + '&size=300x300" />'
          } else {
            qrDiv.innerHTML = '<p>WhatsApp —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω!</p>'
          }
        } catch (err) {
          console.error(err)
        }
      }
      setInterval(fetchQR, 5000)
      fetchQR()
    </script>
  `)
})

// JSON-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ QR
app.get('/wa/qr/json', (req, res) => {
  res.json({ qr: currentQR || null })
})

// —Ä—É—á–Ω–æ–π —Ä–µ–ª–æ–≥–∏–Ω
app.post('/wa/relogin', async (req, res) => {
  const token = req.query.token || req.headers['x-admin-token']
  if (!ADMIN_TOKEN || token !== ADMIN_TOKEN) return res.status(403).send('forbidden')
  await startWhatsApp({ reset: true })
  res.send('OK: relogin started ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è QR')
})

app.listen(Number(PORT), () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üì± QR –¥–ª—è WhatsApp –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: https://tg-wa-bridge.onrender.com/wa/qr`)
})

// ---------------- –°—Ç–∞—Ä—Ç ----------------
;(async () => {
  try {
    await initTelegram()
    await startWhatsApp()
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err)
  }
})()

process.on('SIGINT', () => process.exit(0))
process.on('SIGTERM', () => process.exit(0))
