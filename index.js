import 'dotenv/config'
import express from 'express'
import makeWASocket, { useMultiFileAuthState, Browsers } from '@whiskeysockets/baileys'
import { TelegramClient } from 'telegram'
import { StringSession } from 'telegram/sessions/index.js'
import { NewMessage } from 'telegram/events/index.js'
import qrcodeTerminal from 'qrcode-terminal'
import fs from 'fs'
import path from 'path'
import fetch from 'node-fetch'
import chalk from 'chalk'

const {
  TELEGRAM_API_ID,
  TELEGRAM_API_HASH,
  TELEGRAM_STRING_SESSION,
  TELEGRAM_SOURCE,
  WHATSAPP_GROUP_NAME,
  PORT = 3000,
  AUTH_DIR = 'auth_info',
  GITHUB_TOKEN,
  GIST_ID
} = process.env

let sock = null
let waGroupJid = null
let lastQR = null
let sessionLoaded = false
let waConnectionStatus = 'disconnected'
let telegramConnected = false
let qrTimer = null

const TG_SOURCE = TELEGRAM_SOURCE ? TELEGRAM_SOURCE.replace(/^@/, '').toLowerCase() : ''

// ---------------- Express ----------------
const app = express()
app.use(express.json())
const DOMAIN = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`

app.get('/ping', (req, res) => res.send('pong'))
app.get('/healthz', (req, res) => res.status(200).send('ok'))
app.get('/', (req, res) => res.send('ü§ñ Telegram ‚Üí WhatsApp –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'))

app.get('/wa/status', (req, res) => res.send({
  whatsapp: waConnectionStatus,
  telegram: telegramConnected,
  waGroup: waGroupJid ? { id: waGroupJid, name: WHATSAPP_GROUP_NAME } : null,
  qrPending: !!lastQR
}))

app.post('/wa/reset', async (req, res) => {
  console.log(chalk.yellow('üö® –†—É—á–Ω–æ–π —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ WhatsApp —á–µ—Ä–µ–∑ /wa/reset'))
  await startWhatsApp({ reset: true })
  res.send({ status: 'ok', message: 'WhatsApp —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –Ω–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' })
})

app.get('/wa/qr', (req,res)=>{
  if(!lastQR) return res.status(404).send('QR –∫–æ–¥ –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
  import('qrcode').then(QRCode=>{
    QRCode.toDataURL(lastQR).then(url=>{
      console.log(chalk.yellow('üåç QR URL –¥–ª—è WhatsApp: '), DOMAIN+'/wa/qr')
      res.send(`<img src="${url}"/>`)
    }).catch(e=>res.status(500).send(e))
  })
})

app.get('/wa/qr-ascii', (req,res)=>{
  if(!lastQR) return res.status(404).send('QR –∫–æ–¥ –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
  qrcodeTerminal.generate(lastQR,{small:true}, qrcode=>{
    console.log(chalk.yellow('üåç QR ASCII –¥–ª—è WhatsApp:')); console.log(qrcode)
    res.setHeader('Content-Type','text/plain')
    res.send(qrcode)
  })
})

app.post('/wa/send', async (req,res)=>{
  const text = req.body.text || req.query.text
  if(!text) return res.status(400).send({error:'Text is required'})
  console.log(chalk.blue('‚úâÔ∏è /wa/send ‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ WhatsApp:'), text)
  await sendToWhatsApp(text)
  res.send({status:'ok', text})
})

app.get('/wa/groups', async (req,res)=>{
  if(!sock) return res.status(500).send({error:'WhatsApp –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'})
  try{
    const groups = await sock.groupFetchAllParticipating()
    const groupList = Object.values(groups).map(g=>({id:g.id, name:g.subject}))
    console.log(chalk.blue('üìã /wa/groups ‚Üí –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø WhatsApp –ø–æ–ª—É—á–µ–Ω'))
    res.send(groupList)
  } catch(e){ console.error(e); res.status(500).send({error:e.message}) }
})

app.post('/tg/send', async (req,res)=>{
  const text = req.body.text || req.query.text
  if(!text) return res.status(400).send({error:'Text is required'})
  console.log(chalk.blue('‚úâÔ∏è /tg/send ‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram:'), text)
  await sendTelegramNotification(text)
  res.send({status:'ok', text})
})

app.get('/tg/status', (req,res)=>{
  console.log(chalk.blue('üìä /tg/status ‚Üí –°—Ç–∞—Ç—É—Å Telegram –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π'))
  res.send({
    telegram: telegramConnected,
    source: TG_SOURCE
  })
})

// ---------------- Telegram ----------------
const tgClient = new TelegramClient(
  new StringSession(TELEGRAM_STRING_SESSION),
  Number(TELEGRAM_API_ID),
  TELEGRAM_API_HASH,
  { connectionRetries: 5 }
)

async function sendTelegramNotification(text) {
  if (!telegramConnected) return
  try {
    await tgClient.sendMessage(TG_SOURCE, { message: text })
    console.log(chalk.green('üì® Telegram:'), text)
    return true
  } catch(e) { 
    console.error(chalk.red('‚ö†Ô∏è Telegram send failed:'), e) 
    return false
  }
}

tgClient.addEventHandler(async (event) => {
  const message = event.message
  if (!message) return
  try {
    const sender = await message.getSender()
    const senderIdStr = sender?.id ? String(sender.id) : ''
    const senderUsername = sender?.username ? sender.username.toLowerCase() : ''
    const isFromSource = senderUsername === TG_SOURCE || senderIdStr === TG_SOURCE
    if (isFromSource && message.message?.trim()) await sendToWhatsApp(message.message)
  } catch (e) { console.error(chalk.red('‚ö†Ô∏è Telegram event error:'), e) }
}, new NewMessage({}))

async function initTelegram() {
  console.log(chalk.cyan('üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...'))
  await tgClient.connect()
  telegramConnected = true
  console.log(chalk.green('‚úÖ Telegram –ø–æ–¥–∫–ª—é—á—ë–Ω. –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:'), TG_SOURCE)
}

// ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
function ensureDir(dir) { if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true }) }
function rmDirSafe(dir) { try { if (fs.existsSync(dir)) fs.rmSync(dir, { recursive: true, force: true }) } catch(e){console.error(e)} }

// ---------------- Gist ----------------
async function saveSessionToGist() {
  if (!GITHUB_TOKEN || !GIST_ID) return
  try {
    const files = {}
    const authFiles = fs.readdirSync(AUTH_DIR)
    for (const f of authFiles) files[f] = { content: fs.readFileSync(path.join(AUTH_DIR,f),'utf-8') }
    await fetch(`https://api.github.com/gists/${GIST_ID}`, {
      method: 'PATCH',
      headers: { Authorization:`token ${GITHUB_TOKEN}`, 'Content-Type':'application/json' },
      body: JSON.stringify({ files })
    })
    console.log(chalk.green('üíæ –°–µ—Å—Å–∏—è WhatsApp —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Gist'))
  } catch(e){ console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ Gist:'), e) }
}

async function loadSessionFromGist() {
  if (!GITHUB_TOKEN || !GIST_ID) return false
  try {
    const res = await fetch(`https://api.github.com/gists/${GIST_ID}`, { headers: { Authorization:`token ${GITHUB_TOKEN}` }})
    const data = await res.json()
    if (!data.files) { console.log(chalk.yellow('‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏–∑ Gist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')); return false }
    ensureDir(AUTH_DIR)
    for (const name in data.files) fs.writeFileSync(path.join(AUTH_DIR,name), data.files[name].content,'utf-8')
    console.log(chalk.green('üì• –°–µ—Å—Å–∏—è WhatsApp –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Gist'))
    return true
  } catch(e){ console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ Gist:'), e); return false }
}

// ---------------- WhatsApp ----------------
async function startWhatsApp({ reset = false } = {}) {
  if (reset) { 
    rmDirSafe(AUTH_DIR)
    sock?.logout?.(); sock?.end?.(); sock = null; 
    sessionLoaded=false; waConnectionStatus='disconnected' 
  }

  if (!reset) {
    sessionLoaded = await loadSessionFromGist()
    if (!sessionLoaded) { 
      console.log(chalk.yellow('‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏–∑ Gist –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, —Å–±—Ä–æ—Å...')); 
      return startWhatsApp({ reset:true }) 
    }
  }

  ensureDir(AUTH_DIR)
  const { state, saveCreds } = await useMultiFileAuthState(AUTH_DIR)
  sock = makeWASocket({ auth: state, browser: Browsers.appropriate('Render','Chrome') })

  sock.ev.on('creds.update', async ()=> { await saveCreds(); await saveSessionToGist() })

  sock.ev.on('connection.update', async ({ connection, qr, lastDisconnect })=>{
    waConnectionStatus = connection==='open'?'connected':connection==='close'?'disconnected':waConnectionStatus

    if (qr) {
      lastQR = qr
      waConnectionStatus='awaiting_qr'
      qrcodeTerminal.generate(qr,{small:true})
      console.log(chalk.yellow(`üåç QR –∫–æ–¥ –¥–ª—è WhatsApp: ${DOMAIN}/wa/qr`))
      await sendTelegramNotification('‚ö†Ô∏è –ù–æ–≤—ã–π QR –¥–ª—è WhatsApp')
    }

    if (connection==='open') {
      lastQR = null
      console.log(chalk.green('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω'))
      sessionLoaded = true
      qrTimer && clearInterval(qrTimer)

      // –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await cacheGroupJid(true)
    }

    if (connection==='close') {
      console.log(chalk.red('‚ùå WhatsApp –æ—Ç–∫–ª—é—á—ë–Ω'), lastDisconnect?.error?.message||'')
      await sendTelegramNotification(`‚ùå WhatsApp –æ—Ç–∫–ª—é—á—ë–Ω`)
      const shouldRestart = lastDisconnect?.error?.output?.statusCode !== 401
      if (shouldRestart) setTimeout(()=>startWhatsApp({reset:false}),5000)
      if (!qrTimer) startQRTimer()
    }
  })

  sock.ev.on('messages.upsert', (msg) => {
    console.log(chalk.gray('üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp:'), msg.messages?.[0]?.message?.conversation || '')
  })

  sock.ev.on('connection.error', (err) => {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WhatsApp:'), err)
  })
}

// –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
function startQRTimer() {
  if (qrTimer) clearInterval(qrTimer)
  qrTimer = setInterval(()=>{
    if(waConnectionStatus!=='connected' && sock && sock.authState) sock.ev.emit('connection.update',{connection:'close'})
  },60000)
}

async function cacheGroupJid(sendWelcome=false) {
  try {
    console.log(chalk.gray('üîé –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã WhatsApp:'), WHATSAPP_GROUP_NAME)
    const groups = await sock.groupFetchAllParticipating()
    const target = Object.values(groups).find(g => (g.subject||'').trim().toLowerCase() === (WHATSAPP_GROUP_NAME||'').trim().toLowerCase())

    if(target){ 
      waGroupJid = target.id
      console.log(chalk.green(`‚úÖ –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–∞–π–¥–µ–Ω–∞: ${target.subject}`)) 

      if(sendWelcome){
        console.log(chalk.blue('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp'))
        await sendToWhatsApp('üö® –†–∞–¥–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω')
      }
    } else { 
      waGroupJid = null
      console.log(chalk.red('‚ùå –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) 
    }
  } catch(e){ 
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:'), e) 
  }
}

async function sendToWhatsApp(text) {
  if(!sock){ console.log(chalk.yellow('‚è≥ WhatsApp –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')); return }
  if(!waGroupJid) await cacheGroupJid()
  if(!waGroupJid){ console.log(chalk.red('‚ùå –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')); return }
  try{ await sock.sendMessage(waGroupJid,{text}); console.log(chalk.green('‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp')) }
  catch(e){ console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:'), e) }
}

// ---------------- –°—Ç–∞—Ä—Ç ----------------
;(async ()=>{
  try {
    console.log(chalk.cyan('üöÄ –°—Ç–∞—Ä—Ç –º–æ—Å—Ç–∞ Telegram ‚Üí WhatsApp'))
    await initTelegram()
    await startWhatsApp()
    app.listen(Number(PORT), () => {
      console.log(chalk.cyan(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`))
      console.log(chalk.green('üíª –î–æ—Å—Ç—É–ø–Ω—ã–µ HTTP –∫–æ–º–∞–Ω–¥—ã:'))
      console.log(`${DOMAIN}/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞`)
      console.log(`${DOMAIN}/healthz - health check`)
      console.log(`${DOMAIN}/wa/status - —Å—Ç–∞—Ç—É—Å WhatsApp –∏ Telegram`)
      console.log(`${DOMAIN}/wa/reset - —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ WhatsApp`)
      console.log(`${DOMAIN}/wa/qr - –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ (img)`)
      console.log(`${DOMAIN}/wa/qr-ascii - –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –≤ ASCII`)
      console.log(`${DOMAIN}/wa/send - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ WhatsApp (POST/GET text)`)
      console.log(`${DOMAIN}/wa/groups - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø WhatsApp`)
      console.log(`${DOMAIN}/tg/send - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram (POST/GET text)`)
      console.log(`${DOMAIN}/tg/status - —Å—Ç–∞—Ç—É—Å Telegram`)
    })
    console.log(chalk.green('‚úÖ –ú–æ—Å—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
  } catch(err){ console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞:'), err); process.exit(1) }
})()

process.on('SIGINT',()=>process.exit(0))
process.on('SIGTERM',()=>process.exit(0))
