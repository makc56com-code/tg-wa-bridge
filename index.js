import 'dotenv/config'
import express from 'express'
import makeWASocket, { useMultiFileAuthState, Browsers } from '@whiskeysockets/baileys'
import { TelegramClient } from 'telegram'
import { StringSession } from 'telegram/sessions/index.js'
import { NewMessage } from 'telegram/events/index.js'
import qrcodeTerminal from 'qrcode-terminal'
import QRCode from 'qrcode'
import fs from 'fs'
import path from 'path'
import url from 'url'

// ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
const {
  TELEGRAM_API_ID,
  TELEGRAM_API_HASH,
  TELEGRAM_STRING_SESSION,
  TELEGRAM_SOURCE,
  WHATSAPP_GROUP_NAME,
  ADMIN_TOKEN,
  PORT = process.env.PORT || 3000,
  AUTH_DIR = process.env.AUTH_DIR || 'auth_info',
} = process.env

let sock = null
let waGroupJid = null
let currentQR = null
let lastQR = null // –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π QR

// ---------------- Telegram ----------------
const tgClient = new TelegramClient(
  new StringSession(TELEGRAM_STRING_SESSION),
  Number(TELEGRAM_API_ID),
  TELEGRAM_API_HASH,
  { connectionRetries: 5 }
)

// –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ¬´–∏—Å—Ç–æ—á–Ω–∏–∫¬ª –∏–∑ .env (—É–±–∏—Ä–∞–µ–º @, –ø—Ä–æ–±–µ–ª—ã)
function normSource(v) {
  if (!v) return ''
  return String(v).trim().replace(/^@/, '').toLowerCase()
}
const TG_SOURCE = normSource(TELEGRAM_SOURCE)

tgClient.addEventHandler(async (event) => {
  const message = event.message
  if (!message) return
  try {
    const sender = await message.getSender()

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    const senderIdStr = sender?.id ? String(sender.id) : ''
    const senderUsername = sender?.username ? String(sender.username).toLowerCase() : ''
    const senderFirst = sender?.firstName ? String(sender.firstName).toLowerCase() : ''

    const isFromSource =
      (!!TG_SOURCE && (
        senderIdStr === TG_SOURCE ||                  // –µ—Å–ª–∏ –≤ .env —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–≤–æ–π id
        senderUsername === TG_SOURCE ||               // @username (–±–µ–∑ @)
        senderFirst === TG_SOURCE                     // –∏–º—è
      ))

    if (isFromSource) {
      const text = message.message || ''
      if (text.trim().length > 0) {
        console.log('üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram:', text)
        await sendToWhatsApp(text)
      }
    }
  } catch (e) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è Telegram:', e)
  }
}, new NewMessage({}))

async function initTelegram() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram...')
  await tgClient.connect()
  console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω')
  console.log('üë§ –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:', TELEGRAM_SOURCE)
}

// ---------------- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è AUTH_DIR ----------------
function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true })
}
function rmDirSafe(dir) {
  try {
    if (fs.existsSync(dir)) fs.rmSync(dir, { recursive: true, force: true })
  } catch (e) {
    console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', e)
  }
}

// ---------------- WhatsApp (Baileys) ----------------
async function startWhatsApp({ reset = false } = {}) {
  if (reset) {
    console.log('‚ôªÔ∏è –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp ‚Äî —É–¥–∞–ª—è—é', AUTH_DIR)
    rmDirSafe(AUTH_DIR)
    if (sock) {
      try { await sock.logout() } catch {}
      try { sock.end && sock.end() } catch {}
      sock = null
    }
  }

  ensureDir(AUTH_DIR)
  const { state, saveCreds } = await useMultiFileAuthState(AUTH_DIR)

  sock = makeWASocket({
    auth: state,
    browser: Browsers.appropriate('Render', 'Chrome'),
    // –ø–µ—á–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ QR –Ω–µ –≤–∫–ª—é—á–∞–µ–º ‚Äî —Å–∞–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    // printQRInTerminal: false
  })

  sock.ev.on('creds.update', saveCreds)

  sock.ev.on('connection.update', (update) => {
    const { connection, qr, lastDisconnect } = update

    if (qr) {
      if (qr !== lastQR) {
        currentQR = qr
        lastQR = qr
        console.log('üì± –ù–æ–≤—ã–π QR –ø–æ–ª—É—á–µ–Ω (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /wa/qr)')
        // ASCII –≤ –ª–æ–≥–∏ (–Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
        qrcodeTerminal.generate(qr, { small: true })
      }
    } else if (lastQR) {
      console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω, QR –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω')
      currentQR = null
      lastQR = null
    }

    if (connection === 'open') {
      console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω')
      cacheGroupJid()
    } else if (connection === 'close') {
      const err = lastDisconnect?.error
      console.log('‚ùå WhatsApp –æ—Ç–∫–ª—é—á—ë–Ω', err ? `(${err?.message || err})` : '')
      console.log('‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...')
      setTimeout(() => startWhatsApp({ reset: false }), 5000)
    }
  })
}

async function cacheGroupJid() {
  try {
    const groups = await sock.groupFetchAllParticipating()
    const target = Object.values(groups).find(
      (g) =>
        (g.subject || '').trim().toLowerCase() ===
        (WHATSAPP_GROUP_NAME || '').trim().toLowerCase()
    )
    if (target) {
      waGroupJid = target.id
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ WhatsApp: ${target.subject} (${waGroupJid})`)
    } else {
      console.log(`‚ùå –ì—Ä—É–ø–ø–∞ WhatsApp "${WHATSAPP_GROUP_NAME}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:', e)
  }
}

async function sendToWhatsApp(text) {
  if (!sock) return console.log('‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WhatsApp')
  if (!waGroupJid) await cacheGroupJid()
  if (!waGroupJid) return console.log('‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ')

  try {
    await sock.sendMessage(waGroupJid, { text })
    console.log('‚û°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ WhatsApp')
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp:', err)
  }
}

// ---------------- Express (Render + –∞–¥–º–∏–Ω) ----------------
const app = express()
app.use(express.json())

// üîπ –ù–æ–≤—ã–π ping-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot
app.get('/ping', (req, res) => {
  res.send('pong')
})

app.get('/healthz', (req, res) => res.status(200).send('ok'))
app.get('/', (req, res) => res.send('ü§ñ Telegram ‚Üí WhatsApp (Baileys) –º–æ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç'))

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∂–∏–≤—ã–º QR (SVG –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)
app.get('/wa/qr', async (req, res) => {
  const __dirname = path.dirname(url.fileURLToPath(import.meta.url))
  const html = `
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>QR –¥–ª—è WhatsApp</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial; margin: 24px; }
    .wrap { max-width: 520px; margin: 0 auto; text-align: center; }
    #qrbox { margin-top: 16px; }
    .muted { color: #666; font-size: 14px; }
    .badge { display:inline-block; padding:4px 8px; border:1px solid #ddd; border-radius:999px; font-size:12px; }
  </style>
</head>
<body>
  <div class="wrap">
    <h2>üì± QR –¥–ª—è WhatsApp</h2>
    <div class="badge">–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ ~20 —Å–µ–∫</div>
    <div id="qrbox"><p class="muted">–ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR...</p></div>
    <p class="muted">–ï—Å–ª–∏ QR –ø—Ä–æ–ø–∞–ª ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
  </div>
  <script>
    let last = ''
    async function draw() {
      try {
        const r = await fetch('/wa/qr/json', { cache: 'no-store' })
        const data = await r.json()
        const box = document.getElementById('qrbox')
        if (data.qr && data.qr !== last) {
          last = data.qr
          const r2 = await fetch('/wa/qr/svg?data=' + encodeURIComponent(data.qr), { cache: 'no-store' })
          const svg = await r2.text()
          box.innerHTML = svg
        } else if (!data.qr) {
          box.innerHTML = '<p class="muted">WhatsApp —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω</p>'
        }
      } catch (e) {
        console.error(e)
      }
    }
    setInterval(draw, 5000)
    draw()
  </script>
</body>
</html>
  `
  res.setHeader('content-type', 'text/html; charset=utf-8')
  res.send(html)
})

// JSON-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ QR
app.get('/wa/qr/json', (req, res) => {
  res.json({ qr: currentQR || null })
})

// SVG-—ç–Ω–¥–ø–æ–∏–Ω—Ç (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API)
app.get('/wa/qr/svg', async (req, res) => {
  const data = req.query.data
  if (!data) return res.status(400).send('missing data')
  try {
    const svg = await QRCode.toString(data, { type: 'svg', margin: 1, width: 320 })
    res.setHeader('content-type', 'image/svg+xml; charset=utf-8')
    res.send(svg)
  } catch (e) {
    res.status(500).send('qr error')
  }
})

// —Ä—É—á–Ω–æ–π —Ä–µ–ª–æ–≥–∏–Ω (–ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å AUTH_DIR)
app.post('/wa/relogin', async (req, res) => {
  const token = req.query.token || req.headers['x-admin-token']
  if (!ADMIN_TOKEN || token !== ADMIN_TOKEN) return res.status(403).send('forbidden')
  await startWhatsApp({ reset: true })
  res.send('OK: relogin started ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è QR')
})

app.listen(Number(PORT), () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üì± –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å QR: /wa/qr (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å; –¥–æ–º–µ–Ω –±–µ—Ä–∏—Ç–µ –∏–∑ Render)`)
})

// ---------------- –°—Ç–∞—Ä—Ç ----------------
;(async () => {
  try {
    await initTelegram()
    await startWhatsApp()
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err)
  }
})()

process.on('SIGINT', () => process.exit(0))
process.on('SIGTERM', () => process.exit(0))
