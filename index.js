// index.js
import 'dotenv/config'
import express from 'express'
import makeWASocket, { useMultiFileAuthState, Browsers } from '@whiskeysockets/baileys'
import { TelegramClient } from 'telegram'
import { StringSession } from 'telegram/sessions/index.js'
import { NewMessage } from 'telegram/events/index.js'
import qrcodeTerminal from 'qrcode-terminal'
import fs from 'fs'
import path from 'path'
import fetch from 'node-fetch'
import chalk from 'chalk'
import QRCode from 'qrcode'

const {
  TELEGRAM_API_ID,
  TELEGRAM_API_HASH,
  TELEGRAM_STRING_SESSION,
  TELEGRAM_SOURCE,
  WHATSAPP_GROUP_NAME,
  PORT = 3000,
  AUTH_DIR = 'auth_info',
  GITHUB_TOKEN,
  GIST_ID
} = process.env

let sock = null
let waGroupJid = null
let lastQR = null
let sessionLoaded = false
let waConnectionStatus = 'disconnected'
let telegramConnected = false
let qrTimer = null

const TG_SOURCE = TELEGRAM_SOURCE ? TELEGRAM_SOURCE.replace(/^@/, '').toLowerCase() : ''

// ---------------- Express ----------------
const app = express()
app.use(express.json())

const DOMAIN = process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`

// Root ‚Äî UI with buttons and dynamic QR preview
app.get('/', (req, res) => {
  const qrPending = !!lastQR
  const html = `<!doctype html>
  <html>
  <head>
    <meta charset="utf-8" />
    <title>Telegram ‚Üí WhatsApp –º–æ—Å—Ç</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <style>
      body{font-family:Inter,Segoe UI,Roboto,Arial; background:#0f1724; color:#e6eef8; margin:0; padding:24px; display:flex; gap:24px; flex-direction:column; align-items:center;}
      .card{background:linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01)); border-radius:12px; padding:18px; width:100%; max-width:920px; box-shadow:0 8px 30px rgba(2,6,23,0.6);}
      h1{margin:0 0 8px 0; font-size:20px}
      p.sub{margin:0 0 16px 0; color:#b9c6d8}
      .grid{display:grid; grid-template-columns: 1fr 320px; gap:18px; align-items:start;}
      .buttons{display:flex; flex-wrap:wrap; gap:10px}
      a.button{display:inline-block; text-decoration:none; padding:10px 14px; border-radius:10px; background:#06b6d4; color:#04202a; font-weight:600}
      a.ghost{background:transparent; border:1px solid rgba(255,255,255,0.06); color:#dcecff}
      .qr-wrap{display:flex;flex-direction:column; gap:8px; align-items:center}
      .qr-img{width:280px; height:280px; border-radius:8px; background:#071024; display:flex; align-items:center; justify-content:center; overflow:hidden; padding:8px}
      .meta{font-size:13px; color:#9fb0c8}
      .status{margin-top:10px; font-weight:600}
      .small{font-size:13px; color:#9fb0c8}
      .note{margin-top:12px; font-size:13px; color:#94aacf}
    </style>
  </head>
  <body>
    <div class="card">
      <h1>ü§ñ Telegram ‚Üí WhatsApp –º–æ—Å—Ç</h1>
      <p class="sub">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º –∏ QR –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp</p>

      <div class="grid">
        <div>
          <div class="buttons">
            <a class="button" href="/ping" target="_blank">Ping</a>
            <a class="button ghost" href="/healthz" target="_blank">Health</a>
            <a class="button" href="/tg/status" target="_blank">Telegram Status</a>
            <a class="button" href="/wa/status" target="_blank">WhatsApp Status</a>
            <a class="button ghost" href="/wa/groups" target="_blank">Get WA Groups</a>
            <a class="button" href="/tg/send?text=Hello%20from%20bridge" target="_blank">Send ‚Üí Telegram</a>
            <a class="button ghost" href="/wa/send?text=Hello%20from%20bridge" target="_blank">Send ‚Üí WhatsApp</a>
            <a class="button" href="/wa/reset" target="_blank">Reset WA Session</a>
            <a class="button ghost" href="/wa/qr-ascii" target="_blank">QR ASCII</a>
          </div>

          <div class="note">
            <div class="small">Domain: ${DOMAIN}</div>
            <div class="status">WA connection: <strong>${waConnectionStatus}</strong> ¬∑ Telegram: <strong>${telegramConnected ? 'connected' : 'disconnected'}</strong></div>
            <div class="small">Target WA group: <strong>${WHATSAPP_GROUP_NAME || '‚Äî'}</strong></div>
            <div style="margin-top:8px" class="small">QR pending: <strong>${qrPending}</strong></div>
          </div>
        </div>

        <div class="qr-wrap">
          <div class="qr-img" id="qrbox">
            ${ lastQR ? `<img id="qrimage" src="/wa/qr-img?ts=${Date.now()}" style="width:100%;height:100%;object-fit:contain" />` : `<div style="color:#274058">QR not generated</div>` }
          </div>
          <div class="meta">QR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (–∫–∞–∂–¥—ã–µ 10s) ‚Äî –µ—Å–ª–∏ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π QR, –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ WhatsApp</div>
        </div>
      </div>
    </div>

    <script>
      // simple poll to refresh QR image when available
      setInterval(async () => {
        try {
          const res = await fetch('/wa/status');
          if(!res.ok) return;
          const json = await res.json();
          const pending = json.qrPending;
          const img = document.getElementById('qrimage');
          if(pending){
            if(!img){
              const box = document.getElementById('qrbox');
              const i = document.createElement('img');
              i.id = 'qrimage';
              i.style.width = '100%';
              i.style.height = '100%';
              i.style.objectFit = 'contain';
              box.innerHTML = '';
              box.appendChild(i);
              i.src = '/wa/qr-img?ts=' + Date.now();
            } else {
              img.src = '/wa/qr-img?ts=' + Date.now();
            }
          } else {
            // remove image if connected
            const box = document.getElementById('qrbox');
            if(!pending && box){
              // keep last image but show overlay text
            }
          }
        } catch(e){}
      }, 10000);
    </script>
  </body>
  </html>`
  res.setHeader('Content-Type','text/html; charset=utf-8')
  res.send(html)
})

app.get('/ping', (req, res) => res.send('pong'))
app.get('/healthz', (req, res) => res.status(200).send('ok'))

app.get('/wa/status', (req, res) => res.send({
  whatsapp: waConnectionStatus,
  telegram: telegramConnected,
  waGroup: waGroupJid ? { id: waGroupJid, name: WHATSAPP_GROUP_NAME } : null,
  qrPending: !!lastQR
}))

app.post('/wa/reset', async (req, res) => {
  console.log(chalk.yellow('üö® –†—É—á–Ω–æ–π —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ WhatsApp —á–µ—Ä–µ–∑ /wa/reset'))
  await startWhatsApp({ reset: true })
  res.send({ status: 'ok', message: 'WhatsApp —Å–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –Ω–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' })
})

// Serve QR as an embeddable PNG image (binary)
app.get('/wa/qr-img', async (req, res) => {
  if (!lastQR) return res.status(404).send('QR –∫–æ–¥ –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
  try {
    const dataUrl = await QRCode.toDataURL(lastQR, { margin: 1, width: 512 })
    const base64 = dataUrl.split(',')[1]
    const buffer = Buffer.from(base64, 'base64')
    res.setHeader('Content-Type', 'image/png')
    // prevent caching so the client always fetches latest
    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate')
    res.send(buffer)
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR image:', e)
    res.status(500).send('QR generation error')
  }
})

app.get('/wa/qr', (req, res) => {
  if (!lastQR) return res.status(404).send('QR –∫–æ–¥ –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
  // render small HTML page with QR for quick view
  QRCode.toDataURL(lastQR, { margin: 1, width: 640 })
    .then(url => {
      const html = `<!doctype html><html><head><meta charset="utf-8"/><title>WA QR</title></head><body style="display:flex;align-items:center;justify-content:center;height:100vh;background:#071024"><img src="${url}" style="max-width:95%;max-height:95%"/></body></html>`
      res.setHeader('Content-Type','text/html; charset=utf-8')
      res.send(html)
    })
    .catch(e => res.status(500).send(e.message || e))
})

app.get('/wa/qr-ascii', (req, res) => {
  if(!lastQR) return res.status(404).send('QR –∫–æ–¥ –ø–æ–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω')
  qrcodeTerminal.generate(lastQR, { small: true }, qrcode => {
    console.log(chalk.yellow('üåç QR ASCII –¥–ª—è WhatsApp:')); console.log(qrcode)
    res.setHeader('Content-Type','text/plain; charset=utf-8')
    res.send(qrcode)
  })
})

app.post('/wa/send', async (req, res) => {
  const text = req.body.text || req.query.text
  if (!text) return res.status(400).send({ error: 'Text is required' })
  console.log(chalk.blue('‚úâÔ∏è /wa/send ‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ WhatsApp:'), text)
  await sendToWhatsApp(text)
  res.send({ status: 'ok', text })
})

app.get('/wa/groups', async (req, res) => {
  if (!sock) return res.status(500).send({ error: 'WhatsApp –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' })
  try {
    const groups = await sock.groupFetchAllParticipating()
    const groupList = Object.values(groups).map(g => ({ id: g.id, name: g.subject }))
    console.log(chalk.blue('üìã /wa/groups ‚Üí –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø WhatsApp –ø–æ–ª—É—á–µ–Ω'))
    res.send(groupList)
  } catch (e) { console.error(e); res.status(500).send({ error: e?.message || e }) }
})

app.post('/tg/send', async (req, res) => {
  const text = req.body.text || req.query.text
  if (!text) return res.status(400).send({ error: 'Text is required' })
  console.log(chalk.blue('‚úâÔ∏è /tg/send ‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram:'), text)
  await sendTelegramNotification(text)
  res.send({ status: 'ok', text })
})

app.get('/tg/status', (req, res) => {
  console.log(chalk.blue('üìä /tg/status ‚Üí –°—Ç–∞—Ç—É—Å Telegram –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π'))
  res.send({
    telegram: telegramConnected,
    source: TG_SOURCE
  })
})

// ---------------- Telegram ----------------
const tgClient = new TelegramClient(
  new StringSession(TELEGRAM_STRING_SESSION || ''),
  Number(TELEGRAM_API_ID),
  TELEGRAM_API_HASH,
  { connectionRetries: 5 }
)

async function sendTelegramNotification(text) {
  if (!TELEGRAM_STRING_SESSION) {
    console.log(chalk.yellow('‚ö†Ô∏è TELEGRAM_STRING_SESSION –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram'))
    return false
  }
  if (!telegramConnected) {
    console.log(chalk.yellow('‚ö†Ô∏è Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'))
    return false
  }
  try {
    // TG_SOURCE –º–æ–∂–µ—Ç –±—ã—Ç—å username –∏–ª–∏ id; TG_SOURCE –ø—É—Å—Ç ‚Äî skip
    if (!TG_SOURCE) {
      console.log(chalk.yellow('‚ö†Ô∏è TELEGRAM_SOURCE –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É'))
      return false
    }
    await tgClient.sendMessage(TG_SOURCE, { message: text })
    console.log(chalk.green('üì® Telegram:'), text)
    return true
  } catch (e) {
    console.error(chalk.red('‚ö†Ô∏è Telegram send failed:'), e)
    return false
  }
}

// Telegram event handler: –∂—ë—Å—Ç–∫–∞—è, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
tgClient.addEventHandler(async (event) => {
  const message = event.message
  if (!message) return
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    let text = null
    // Varying shapes depending on library internals
    if (message.message && typeof message.message === 'string') text = message.message
    else if (message.message?.message?.conversation) text = message.message.message.conversation
    else if (message.message?.message?.text) text = message.message.message.text
    else if (message.message?.message) {
      // try to stringify small text payloads
      const mm = message.message.message
      if (typeof mm === 'object' && mm !== null && mm.text) text = mm.text
    }

    const sender = await message.getSender().catch(()=>null)
    const senderIdStr = sender?.id ? String(sender.id) : ''
    const senderUsername = sender?.username ? ('' + sender.username).toLowerCase() : ''
    const isFromSource = (TG_SOURCE && (senderUsername === TG_SOURCE || senderIdStr === TG_SOURCE))
    if (isFromSource && text && String(text).trim()) {
      await sendToWhatsApp(String(text).trim())
    }
  } catch (e) { console.error(chalk.red('‚ö†Ô∏è Telegram event error:'), e) }
}, new NewMessage({}))

async function initTelegram() {
  try {
    console.log(chalk.cyan('üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...'))
    await tgClient.connect()
    telegramConnected = true
    console.log(chalk.green('‚úÖ Telegram –ø–æ–¥–∫–ª—é—á—ë–Ω. –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:'), TG_SOURCE)
  } catch (e) {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:'), e)
    telegramConnected = false
  }
}

// ---------------- Gist Session ----------------
async function saveSessionToGist(stateFiles) {
  if (!GITHUB_TOKEN || !GIST_ID) {
    // silent if not configured
    return
  }
  try {
    const files = {}
    for (const f in stateFiles) files[f] = { content: stateFiles[f] }
    await fetch(`https://api.github.com/gists/${GIST_ID}`, {
      method: 'PATCH',
      headers: { Authorization: `token ${GITHUB_TOKEN}`, 'Content-Type': 'application/json' },
      body: JSON.stringify({ files })
    })
    console.log(chalk.green('üíæ –°–µ—Å—Å–∏—è WhatsApp —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Gist'))
  } catch (e) { console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ Gist:'), e) }
}

async function loadSessionFromGist() {
  if (!GITHUB_TOKEN || !GIST_ID) return null
  try {
    const res = await fetch(`https://api.github.com/gists/${GIST_ID}`, { headers: { Authorization: `token ${GITHUB_TOKEN}` } })
    if (!res.ok) {
      console.log(chalk.yellow('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Gist:', res.status))
      return null
    }
    const data = await res.json()
    if (!data.files) { console.log(chalk.yellow('‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏–∑ Gist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')); return null }
    console.log(chalk.green('üì• –°–µ—Å—Å–∏—è WhatsApp –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Gist (–≤ –ø–∞–º—è—Ç–∏)'))
    return Object.fromEntries(Object.entries(data.files).map(([k, v]) => [k, v.content]))
  } catch (e) { console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ Gist:'), e); return null }
}

// ---------------- WhatsApp ----------------
async function startWhatsApp({ reset = false } = {}) {
  if (reset) {
    try { sock?.logout?.(); sock?.end?.(); } catch(e){}
    sock = null
    sessionLoaded = false
    waConnectionStatus = 'disconnected'
    lastQR = null
  }

  // ensure auth dir exists
  try { fs.mkdirSync(AUTH_DIR, { recursive: true }) } catch (e) { console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AUTH_DIR', e) }

  // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ Gist ‚Äî –∏ –∑–∞–ø–∏—Å–∞—Ç—å –µ—ë –≤ AUTH_DIR –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ useMultiFileAuthState
  let authStateFiles = reset ? null : await loadSessionFromGist()
  if (authStateFiles) {
    try {
      for (const f of Object.keys(authStateFiles)) {
        const target = path.join(AUTH_DIR, f)
        fs.writeFileSync(target, authStateFiles[f], 'utf-8')
      }
      console.log(chalk.green('üíæ –°–µ—Å—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π AUTH_DIR –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π Baileys'))
    } catch (e) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏ –≤ AUTH_DIR:'), e)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è auth state (Baileys –ø—Ä–æ—á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ AUTH_DIR –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å)
  const { state, saveCreds } = await useMultiFileAuthState(AUTH_DIR)

  // –°–æ–∑–¥–∞—ë–º —Å–æ–∫–µ—Ç
  sock = makeWASocket({ auth: state, browser: Browsers.appropriate('Render', 'Chrome') })

  // –ö–æ–≥–¥–∞ cred'—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (useMultiFileAuthState –¥–µ–ª–∞–µ—Ç —ç—Ç–æ) –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Gist
  sock.ev.on('creds.update', async () => {
    try {
      await saveCreds()
    } catch (e) { /* ok */ }
    // –ü–æ–¥–æ–∂–¥—ë–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, –∑–∞—Ç–µ–º –ø—Ä–æ—á–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ Gist
    try {
      const files = {}
      for (const f of fs.readdirSync(AUTH_DIR)) {
        const fp = path.join(AUTH_DIR, f)
        if (fs.statSync(fp).isFile()) files[f] = fs.readFileSync(fp, 'utf-8')
      }
      await saveSessionToGist(files)
    } catch (e) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Gist:'), e)
    }
  })

  sock.ev.on('connection.update', async (update) => {
    const { connection, qr, lastDisconnect } = update
    if (connection === 'open') waConnectionStatus = 'connected'
    else if (connection === 'close') waConnectionStatus = 'disconnected'
    else if (connection === 'connecting') waConnectionStatus = 'connecting'

    // QR –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç
    if (qr && waConnectionStatus !== 'connected') {
      lastQR = qr
      waConnectionStatus = 'awaiting_qr'
      qrcodeTerminal.generate(qr, { small: true })
      console.log(chalk.yellow(`üåç QR –∫–æ–¥ –¥–ª—è WhatsApp: ${DOMAIN}/wa/qr`))
      // —É–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
      await sendTelegramNotification('‚ö†Ô∏è –ù–æ–≤—ã–π QR –¥–ª—è WhatsApp')
    }

    if (connection === 'open') {
      lastQR = null
      console.log(chalk.green('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω'))
      sessionLoaded = true
      qrTimer && clearInterval(qrTimer)
      await cacheGroupJid(true)
    }

    if (connection === 'close') {
      console.log(chalk.red('‚ùå WhatsApp –æ—Ç–∫–ª—é—á—ë–Ω'), lastDisconnect?.error?.message || '')
      await sendTelegramNotification('‚ùå WhatsApp –æ—Ç–∫–ª—é—á—ë–Ω')
      // –µ—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (lastDisconnect?.error?.output?.statusCode !== 401) setTimeout(() => startWhatsApp({ reset: false }), 5000)
      if (!qrTimer) startQRTimer()
    }
  })

  sock.ev.on('messages.upsert', async (msg) => {
    const text = msg.messages?.[0]?.message?.conversation || msg.messages?.[0]?.message?.extendedText?.text
    if (text) console.log(chalk.gray('üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ WhatsApp:'), text)
  })

  sock.ev.on('connection.error', (err) => {
    console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è WhatsApp:'), err)
  })
}

// –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ ‚Äî –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–±—É–∂–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
function startQRTimer() {
  if (qrTimer) clearInterval(qrTimer)
  qrTimer = setInterval(() => {
    if (waConnectionStatus !== 'connected' && sock && sock.authState) {
      // —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–π QR (—ç–º—É–ª–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ), Baileys —Å–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –Ω–æ–≤—ã–π qr –≤ connection.update
      sock.ev.emit('connection.update', { connection: 'close' })
    }
  }, 60000)
}

// ---------------- –ì—Ä—É–ø–ø—ã –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ----------------
async function cacheGroupJid(sendWelcome = false) {
  try {
    console.log(chalk.gray('üîé –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã WhatsApp:'), WHATSAPP_GROUP_NAME)
    if (!sock) { console.log(chalk.yellow('‚è≥ sock –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')); return }
    const groups = await sock.groupFetchAllParticipating()
    const groupNames = Object.values(groups).map(g => g.subject)
    for (const name of groupNames) {
      console.log(chalk.gray(`üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã: ${name}`))
    }
    const target = Object.values(groups).find(g => (g.subject || '').trim().toLowerCase() === (WHATSAPP_GROUP_NAME || '').trim().toLowerCase())
    if (target) {
      waGroupJid = target.id
      console.log(chalk.green(`‚úÖ –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–∞–π–¥–µ–Ω–∞: ${target.subject}`))
      if (sendWelcome) {
        const welcome = `[üîß —Å–µ—Ä–≤–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîß]\n[üåé–ø–æ–¥–∫–ª—é—á–µ–Ω–æüåé]\n[üö®–†–ê–î–ê–† –ê–ö–¢–ò–í–ï–ù üö®]`
        console.log(chalk.blue('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp'))
        await sendToWhatsApp(welcome)
      }
    } else {
      waGroupJid = null
      console.log(chalk.red('‚ùå –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'))
    }
  } catch (e) { console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:'), e) }
}

async function sendToWhatsApp(text) {
  if (!sock) { console.log(chalk.yellow('‚è≥ WhatsApp –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')); return }
  if (!waGroupJid) await cacheGroupJid()
  if (!waGroupJid) { console.log(chalk.red('‚ùå –ì—Ä—É–ø–ø–∞ WhatsApp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')); return }
  try {
    await new Promise(r => setTimeout(r, 500)) // –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    await sock.sendMessage(waGroupJid, { text })
    console.log(chalk.green('‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WhatsApp'))
  } catch (e) { console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:'), e) }
}

// ---------------- –°—Ç–∞—Ä—Ç ----------------
;(async () => {
  try {
    console.log(chalk.cyan('üöÄ –°—Ç–∞—Ä—Ç –º–æ—Å—Ç–∞ Telegram ‚Üí WhatsApp'))
    await initTelegram()
    await startWhatsApp()
    app.listen(Number(PORT), () => {
      console.log(chalk.cyan(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`))
      console.log(chalk.green('üíª –î–æ—Å—Ç—É–ø–Ω—ã–µ HTTP –∫–æ–º–∞–Ω–¥—ã:'))
      console.log(`${DOMAIN}/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞`)
      console.log(`${DOMAIN}/healthz - health check`)
      console.log(`${DOMAIN}/wa/status - —Å—Ç–∞—Ç—É—Å WhatsApp –∏ Telegram`)
      console.log(`${DOMAIN}/wa/reset - —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ WhatsApp`)
      console.log(`${DOMAIN}/wa/qr - –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ (img)`)
      console.log(`${DOMAIN}/wa/qr-ascii - –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –≤ ASCII`)
      console.log(`${DOMAIN}/wa/qr-img - –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ (PNG image for embedding)`)
      console.log(`${DOMAIN}/wa/send - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ WhatsApp (POST/GET text)`)
      console.log(`${DOMAIN}/wa/groups - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø WhatsApp`)
      console.log(`${DOMAIN}/tg/send - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram (POST/GET text)`)
      console.log(`${DOMAIN}/tg/status - —Å—Ç–∞—Ç—É—Å Telegram`)
    })
    console.log(chalk.green('‚úÖ –ú–æ—Å—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
  } catch (err) { console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞:'), err); process.exit(1) }
})()

process.on('SIGINT', () => process.exit(0))
process.on('SIGTERM', () => process.exit(0))
