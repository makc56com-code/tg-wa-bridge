// index.js
import 'dotenv/config';
import express from 'express';
import makeWASocket, {
  useMultiFileAuthState,
  Browsers,
} from '@whiskeysockets/baileys';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { NewMessage } from 'telegram/events/index.js';
import qrcodeTerminal from 'qrcode-terminal';

// ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
const TELEGRAM_API_ID = process.env.TELEGRAM_API_ID;
const TELEGRAM_API_HASH = process.env.TELEGRAM_API_HASH;
const TELEGRAM_STRING_SESSION = process.env.TELEGRAM_STRING_SESSION;
const TELEGRAM_SOURCE_CHAT = process.env.TELEGRAM_SOURCE_CHAT; // id —á–∞—Ç–∞ –∏–ª–∏ username
const WHATSAPP_TARGET_GROUP = process.env.WHATSAPP_TARGET_GROUP; // id –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789-123456@g.us'

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
let serviceEnabled = true;

// ---------------- Express ----------------
const app = express();
app.use(express.json());

// ---------------- WhatsApp ----------------
let waSocket;
async function initWhatsApp() {
  const { state, saveCreds } = await useMultiFileAuthState('./auth_info');
  waSocket = makeWASocket.default({
    auth: state,
    browser: Browsers.macOS('WhatsApp'),
  });

  waSocket.ev.on('creds.update', saveCreds);

  waSocket.ev.on('connection.update', (update) => {
    if (update.qr) qrcodeTerminal.generate(update.qr, { small: true });
    if (update.connection === 'open') {
      console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω');
    }
  });
}

// ---------------- Telegram ----------------
const stringSession = new StringSession(TELEGRAM_STRING_SESSION);
const tgClient = new TelegramClient(stringSession, TELEGRAM_API_ID, TELEGRAM_API_HASH, {
  connectionRetries: 5,
});

async function initTelegram() {
  await tgClient.start({
    phoneNumber: async () => process.env.TELEGRAM_PHONE,
    password: async () => process.env.TELEGRAM_PASSWORD,
    phoneCode: async () => {
      console.log('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:');
      return new Promise((resolve) => {
        process.stdin.once('data', (input) => resolve(input.toString().trim()));
      });
    },
    onError: console.error,
  });
  console.log('‚úÖ Telegram –ø–æ–¥–∫–ª—é—á—ë–Ω');

  tgClient.addEventHandler(async (event) => {
    if (!serviceEnabled) return; // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º

    const message = event.message;
    if (!message || !message.text) return;

    try {
      await waSocket.sendMessage(WHATSAPP_TARGET_GROUP, {
        text: message.text,
      });
      console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ WhatsApp:', message.text);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ WhatsApp:', e);
    }
  }, new NewMessage({ chats: [TELEGRAM_SOURCE_CHAT] }));
}

// ---------------- UI –∫–Ω–æ–ø–∫–∏ (HTTP API) ----------------
app.post('/service/:action', (req, res) => {
  const { action } = req.params;
  if (action === 'on') {
    serviceEnabled = true;
    console.log('üîî –°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á—ë–Ω');
    res.send('–°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á—ë–Ω');
  } else if (action === 'off') {
    serviceEnabled = false;
    console.log('üîï –°–µ—Ä–≤–∏—Å –≤—ã–∫–ª—é—á–µ–Ω');
    res.send('–°–µ—Ä–≤–∏—Å –≤—ã–∫–ª—é—á–µ–Ω');
  } else {
    res.status(400).send('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
});

// ---------------- –ó–∞–ø—É—Å–∫ ----------------
(async () => {
  try {
    await initWhatsApp();
    await initTelegram();

    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    console.log(serviceEnabled ? 'üîî –°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á—ë–Ω (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)' : 'üîï –°–µ—Ä–≤–∏—Å –≤—ã–∫–ª—é—á–µ–Ω (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)');

    app.listen(process.env.PORT || 3000, () => {
      console.log('üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É', process.env.PORT || 3000);
    });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', e);
  }
})();
