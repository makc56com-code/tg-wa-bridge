import 'dotenv/config';
import pkg from 'whatsapp-web.js';
import qrcode from 'qrcode-terminal';

const { Client: WAClient, LocalAuth } = pkg;

async function startWAClient() {
  const waClient = new WAClient({
    authStrategy: new LocalAuth({ dataPath: './.wwebjs_auth' }),
    puppeteer: { headless: false, args: ['--no-sandbox'], defaultViewport: null }
  });

  waClient.on('qr', qr => {
    console.log('üì± QR-–∫–æ–¥ –¥–ª—è WhatsApp:');
    qrcode.generate(qr, { small: true });
  });

  waClient.on('authenticated', () => {
    console.log('‚úÖ WhatsApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
  });

  waClient.on('ready', async () => {
    console.log('‚úÖ WhatsApp –≥–æ—Ç–æ–≤');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ window.Store –∏ —á–∞—Ç–æ–≤
    await waClient.pupPage.waitForFunction(
      'window.Store && window.Store.Chat && window.Store.Chat.models.length > 0',
      { timeout: 120000 }
    );

    console.log('‚åõ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø...');

    const chats = await waClient.getChats();
    const groups = [];

    for (let i = 0; i < chats.length; i++) {
      const chat = chats[i];
      process.stdout.write(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ ${i + 1}/${chats.length}: ${chat.name}\r`);

      if (chat.isGroup) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: ${chat.name} | ID: ${chat.id._serialized}`);
        groups.push(chat);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –º–∞—Ä–∫–µ—Ä—ã —É—Å–ø–µ–≤–∞–ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è
      await new Promise(res => setTimeout(res, 100));
    }

    console.log(`\nüîµ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groups.length}`);
  });

  await waClient.initialize();
}

startWAClient();
